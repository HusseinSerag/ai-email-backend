generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}


model User {
  id        String    @id @default(uuid())
  email     String    @unique
  firstName String
  lastName  String
  imageUrl  String?
  account   Account[] @relation("UserAccounts")
  subscription Subscription?
  chatbotInteraction ChatbotInteraction?
}

model ChatbotInteraction {
  id String @id @default(uuid())
  count Int @default(1)
  firstInteraction DateTime @default(now())
  userId String  @unique 
  user   User @relation(fields: [userId], references: [id])

}
model Subscription {
  id  String   @id @default(uuid())
  userId String  @unique // relation scalar field (used in the `@relation` attribute above)
  user   User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  customerId String
  subscriptionId String @unique
  priceId String

 
  currentPeriodEnd DateTime
  updatedAt DateTime @updatedAt

  
  
  
}



model Account {
  id           String         @id @default(uuid())
  users        User[]         @relation("UserAccounts")
  accessToken  String         @unique
  emailAddress String         @unique
  name         String
  deltaToken   String?
  oramaIndex   Json?
  email_addresses EmailAddress[]
  threads      Thread[]
  isSyncedInitially isInitialized @default(start)
}

enum isInitialized {
  start
  complete
}

model Thread {
  id              String    @id @default(uuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  account         Account   @relation(fields: [accountId], references: [id])

  done            Boolean   @default(false)
  inboxStatus     Boolean   @default(true)
  draftStatus     Boolean   @default(false)
  sentStatus      Boolean   @default(false)
  starred         Boolean   @default(false)
  archived        Boolean   @default(false)

  emails          Email[]

  @@index([accountId])
  @@index([done])
  @@index([inboxStatus])
  @@index([draftStatus])
  @@index([sentStatus])
  @@index([lastMessageDate])
}

model Email {
  id                   String    @id @default(uuid())
  threadId             String
  thread               Thread    @relation(fields: [threadId], references: [id])
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity @default(normal)
  meetingMessageMethod MeetingMessageMethod?
  from                 EmailAddress @relation("FromEmail", fields: [fromId], references: [id])
  fromId               String
  to                   EmailAddress[] @relation("ToEmails")
  cc                   EmailAddress[] @relation("CcEmails")
  bcc                  EmailAddress[] @relation("BccEmails")
  replyTo              EmailAddress[] @relation("ReplyToEmails")
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  attachments          EmailAttachment[]
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      String[] 
  nativeProperties     Json?
  folderId             String?
  omitted              String[]

  emailLabel           EmailLabel @default(inbox)

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
}

enum EmailLabel {
  inbox
  sent
  draft
}

model EmailAddress {
  id            String         @id @default(uuid())
  name          String?
  address       String
  raw           String?
  sentEmails    Email[]        @relation("FromEmail")
  receivedTo    Email[]        @relation("ToEmails")
  receivedCc    Email[]        @relation("CcEmails")
  receivedBcc   Email[]        @relation("BccEmails")
  replyToEmails Email[]        @relation("ReplyToEmails")

  accountId     String
  account       Account        @relation(fields: [accountId], references: [id])

  @@unique([accountId, address])
}

model EmailAttachment {
  id              String  @id @default(uuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  Email           Email   @relation(fields: [emailId], references: [id])
  emailId         String
}

enum Sensitivity {
  normal
  private
  personal
  confidential
}

enum MeetingMessageMethod {
  request
  reply
  cancel
  counter
  other
}

enum SubscriptionTier {
  free
  pro
}



enum crdb_internal_region {
  aws_eu_central_1 @map("aws-eu-central-1")
}
